// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dwt_cpp
arma::field<arma::vec> dwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels);
RcppExport SEXP _wv_dwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(dwt_cpp(x, filter_name, nlevels));
    return rcpp_result_gen;
END_RCPP
}
// modwt_cpp
arma::field<arma::vec> modwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels);
RcppExport SEXP _wv_modwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_cpp(x, filter_name, nlevels));
    return rcpp_result_gen;
END_RCPP
}
// arma_to_wv
arma::vec arma_to_wv(arma::vec ar, arma::vec ma, double sigma2, arma::vec tau);
RcppExport SEXP _wv_arma_to_wv(SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_to_wv(ar, ma, sigma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// acf_sum
double acf_sum(arma::vec ar, arma::vec ma, unsigned int last_tau, double alpha);
RcppExport SEXP _wv_acf_sum(SEXP arSEXP, SEXP maSEXP, SEXP last_tauSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type last_tau(last_tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(acf_sum(ar, ma, last_tau, alpha));
    return rcpp_result_gen;
END_RCPP
}
// arma_to_wv_app
arma::vec arma_to_wv_app(arma::vec ar, arma::vec ma, double sigma2, arma::vec tau, double alpha);
RcppExport SEXP _wv_arma_to_wv_app(SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP tauSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_to_wv_app(ar, ma, sigma2, tau, alpha));
    return rcpp_result_gen;
END_RCPP
}
// arma11_to_wv
arma::vec arma11_to_wv(double phi, double theta, double sigma2, const arma::vec& tau);
RcppExport SEXP _wv_arma11_to_wv(SEXP phiSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(arma11_to_wv(phi, theta, sigma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// ar1_to_wv
arma::vec ar1_to_wv(double phi, double sigma2, const arma::vec& tau);
RcppExport SEXP _wv_ar1_to_wv(SEXP phiSEXP, SEXP sigma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_to_wv(phi, sigma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// ma1_to_wv
arma::vec ma1_to_wv(double theta, double sigma2, const arma::vec& tau);
RcppExport SEXP _wv_ma1_to_wv(SEXP thetaSEXP, SEXP sigma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ma1_to_wv(theta, sigma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// qn_to_wv
arma::vec qn_to_wv(double q2, const arma::vec& tau);
RcppExport SEXP _wv_qn_to_wv(SEXP q2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(qn_to_wv(q2, tau));
    return rcpp_result_gen;
END_RCPP
}
// wn_to_wv
arma::vec wn_to_wv(double sigma2, arma::vec tau);
RcppExport SEXP _wv_wn_to_wv(SEXP sigma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(wn_to_wv(sigma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// rw_to_wv
arma::vec rw_to_wv(double gamma2, const arma::vec& tau);
RcppExport SEXP _wv_rw_to_wv(SEXP gamma2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_to_wv(gamma2, tau));
    return rcpp_result_gen;
END_RCPP
}
// dr_to_wv
arma::vec dr_to_wv(double omega, const arma::vec& tau);
RcppExport SEXP _wv_dr_to_wv(SEXP omegaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(dr_to_wv(omega, tau));
    return rcpp_result_gen;
END_RCPP
}
// theoretical_wv
arma::vec theoretical_wv(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau);
RcppExport SEXP _wv_theoretical_wv(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(theoretical_wv(theta, desc, objdesc, tau));
    return rcpp_result_gen;
END_RCPP
}
// decomp_theoretical_wv
arma::mat decomp_theoretical_wv(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau);
RcppExport SEXP _wv_decomp_theoretical_wv(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(decomp_theoretical_wv(theta, desc, objdesc, tau));
    return rcpp_result_gen;
END_RCPP
}
// decomp_to_theo_wv
arma::vec decomp_to_theo_wv(const arma::mat& decomp);
RcppExport SEXP _wv_decomp_to_theo_wv(SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type decomp(decompSEXP);
    rcpp_result_gen = Rcpp::wrap(decomp_to_theo_wv(decomp));
    return rcpp_result_gen;
END_RCPP
}
// seq_cpp
arma::vec seq_cpp(int a, int b);
RcppExport SEXP _wv_seq_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// seq_len_cpp
arma::vec seq_len_cpp(unsigned int n);
RcppExport SEXP _wv_seq_len_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_len_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// quantile_cpp
arma::vec quantile_cpp(arma::vec x, const arma::vec& probs);
RcppExport SEXP _wv_quantile_cpp(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_cpp(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// diff_cpp
arma::vec diff_cpp(arma::vec x, unsigned int lag, unsigned int differences);
RcppExport SEXP _wv_diff_cpp(SEXP xSEXP, SEXP lagSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type differences(differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_cpp(x, lag, differences));
    return rcpp_result_gen;
END_RCPP
}
// ARMAtoMA_cpp
arma::vec ARMAtoMA_cpp(arma::vec ar, arma::vec ma, int lag_max);
RcppExport SEXP _wv_ARMAtoMA_cpp(SEXP arSEXP, SEXP maSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(ARMAtoMA_cpp(ar, ma, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// cfilter
arma::vec cfilter(arma::vec x, arma::vec filter, int sides, bool circular);
RcppExport SEXP _wv_cfilter(SEXP xSEXP, SEXP filterSEXP, SEXP sidesSEXP, SEXP circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< bool >::type circular(circularSEXP);
    rcpp_result_gen = Rcpp::wrap(cfilter(x, filter, sides, circular));
    return rcpp_result_gen;
END_RCPP
}
// rfilter
arma::vec rfilter(arma::vec x, arma::vec filter, arma::vec init);
RcppExport SEXP _wv_rfilter(SEXP xSEXP, SEXP filterSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(rfilter(x, filter, init));
    return rcpp_result_gen;
END_RCPP
}
// ARMAacf_cpp
arma::vec ARMAacf_cpp(arma::vec ar, arma::vec ma, unsigned int lag_max);
RcppExport SEXP _wv_ARMAacf_cpp(SEXP arSEXP, SEXP maSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(ARMAacf_cpp(ar, ma, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// dft_acf
arma::vec dft_acf(const arma::vec& x);
RcppExport SEXP _wv_dft_acf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dft_acf(x));
    return rcpp_result_gen;
END_RCPP
}
// mean_diff
double mean_diff(const arma::vec& x);
RcppExport SEXP _wv_mean_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_diff(x));
    return rcpp_result_gen;
END_RCPP
}
// num_rep
arma::vec num_rep(const arma::vec& x, unsigned int n);
RcppExport SEXP _wv_num_rep(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(num_rep(x, n));
    return rcpp_result_gen;
END_RCPP
}
// intgr_vec
arma::vec intgr_vec(const arma::vec& x, const arma::vec& xi, unsigned int lag);
RcppExport SEXP _wv_intgr_vec(SEXP xSEXP, SEXP xiSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(intgr_vec(x, xi, lag));
    return rcpp_result_gen;
END_RCPP
}
// diff_inv_values
arma::vec diff_inv_values(const arma::vec& x, unsigned int lag, unsigned int d, const arma::vec& xi);
RcppExport SEXP _wv_diff_inv_values(SEXP xSEXP, SEXP lagSEXP, SEXP dSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_inv_values(x, lag, d, xi));
    return rcpp_result_gen;
END_RCPP
}
// diff_inv
arma::vec diff_inv(const arma::vec& x, unsigned int lag, unsigned int d);
RcppExport SEXP _wv_diff_inv(SEXP xSEXP, SEXP lagSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_inv(x, lag, d));
    return rcpp_result_gen;
END_RCPP
}
// acf
arma::cube acf(arma::mat& x, int lagmax, bool cor, bool demean);
RcppExport SEXP _wv_acf(SEXP xSEXP, SEXP lagmaxSEXP, SEXP corSEXP, SEXP demeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lagmax(lagmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type cor(corSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    rcpp_result_gen = Rcpp::wrap(acf(x, lagmax, cor, demean));
    return rcpp_result_gen;
END_RCPP
}
// sarma_objdesc
arma::vec sarma_objdesc(const arma::vec& ar, const arma::vec& ma, const arma::vec& sar, const arma::vec& sma, int s, int i, int si);
RcppExport SEXP _wv_sarma_objdesc(SEXP arSEXP, SEXP maSEXP, SEXP sarSEXP, SEXP smaSEXP, SEXP sSEXP, SEXP iSEXP, SEXP siSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sar(sarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sma(smaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type si(siSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_objdesc(ar, ma, sar, sma, s, i, si));
    return rcpp_result_gen;
END_RCPP
}
// sarma_calculate_spadding
arma::vec sarma_calculate_spadding(unsigned int np, unsigned int nq, unsigned int nsp, unsigned int nsq, unsigned int ns);
RcppExport SEXP _wv_sarma_calculate_spadding(SEXP npSEXP, SEXP nqSEXP, SEXP nspSEXP, SEXP nsqSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type np(npSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsq(nsqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_calculate_spadding(np, nq, nsp, nsq, ns));
    return rcpp_result_gen;
END_RCPP
}
// sarma_components
arma::vec sarma_components(const arma::vec& objdesc);
RcppExport SEXP _wv_sarma_components(SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type objdesc(objdescSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_components(objdesc));
    return rcpp_result_gen;
END_RCPP
}
// sarma_params_construct
arma::vec sarma_params_construct(const arma::vec& ar, const arma::vec& ma, const arma::vec& sar, const arma::vec& sma);
RcppExport SEXP _wv_sarma_params_construct(SEXP arSEXP, SEXP maSEXP, SEXP sarSEXP, SEXP smaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sar(sarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sma(smaSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_params_construct(ar, ma, sar, sma));
    return rcpp_result_gen;
END_RCPP
}
// sarma_expand_unguided
arma::field<arma::vec> sarma_expand_unguided(const arma::vec& params, unsigned int np, unsigned int nq, unsigned int nsp, unsigned int nsq, unsigned int ns, unsigned int p, unsigned int q);
RcppExport SEXP _wv_sarma_expand_unguided(SEXP paramsSEXP, SEXP npSEXP, SEXP nqSEXP, SEXP nspSEXP, SEXP nsqSEXP, SEXP nsSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type np(npSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsq(nsqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_expand_unguided(params, np, nq, nsp, nsq, ns, p, q));
    return rcpp_result_gen;
END_RCPP
}
// sarma_expand
arma::field<arma::vec> sarma_expand(const arma::vec& params, const arma::vec& objdesc);
RcppExport SEXP _wv_sarma_expand(SEXP paramsSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type objdesc(objdescSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_expand(params, objdesc));
    return rcpp_result_gen;
END_RCPP
}
// sp_modwt_cpp
arma::field<arma::vec> sp_modwt_cpp(const arma::mat& X, int J1, int J2);
RcppExport SEXP _wv_sp_modwt_cpp(SEXP XSEXP, SEXP J1SEXP, SEXP J2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type J1(J1SEXP);
    Rcpp::traits::input_parameter< int >::type J2(J2SEXP);
    rcpp_result_gen = Rcpp::wrap(sp_modwt_cpp(X, J1, J2));
    return rcpp_result_gen;
END_RCPP
}
// sp_hfilter
arma::vec sp_hfilter(int jscale);
RcppExport SEXP _wv_sp_hfilter(SEXP jscaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type jscale(jscaleSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_hfilter(jscale));
    return rcpp_result_gen;
END_RCPP
}
// ci_eta3
arma::mat ci_eta3(const arma::vec& y, const arma::vec& dims, double alpha_ov_2);
RcppExport SEXP _wv_ci_eta3(SEXP ySEXP, SEXP dimsSEXP, SEXP alpha_ov_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    rcpp_result_gen = Rcpp::wrap(ci_eta3(y, dims, alpha_ov_2));
    return rcpp_result_gen;
END_RCPP
}
// ci_eta3_robust
arma::mat ci_eta3_robust(const arma::vec& wv_robust, const arma::mat& wv_ci_class, double alpha_ov_2, double eff);
RcppExport SEXP _wv_ci_eta3_robust(SEXP wv_robustSEXP, SEXP wv_ci_classSEXP, SEXP alpha_ov_2SEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_robust(wv_robustSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wv_ci_class(wv_ci_classSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(ci_eta3_robust(wv_robust, wv_ci_class, alpha_ov_2, eff));
    return rcpp_result_gen;
END_RCPP
}
// ci_wave_variance
arma::mat ci_wave_variance(const arma::field<arma::vec>& signal_modwt_bw, const arma::vec& wv, std::string type, double alpha_ov_2, bool robust, double eff);
RcppExport SEXP _wv_ci_wave_variance(SEXP signal_modwt_bwSEXP, SEXP wvSEXP, SEXP typeSEXP, SEXP alpha_ov_2SEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(ci_wave_variance(signal_modwt_bw, wv, type, alpha_ov_2, robust, eff));
    return rcpp_result_gen;
END_RCPP
}
// wave_variance
arma::vec wave_variance(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff);
RcppExport SEXP _wv_wave_variance(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(wave_variance(signal_modwt_bw, robust, eff));
    return rcpp_result_gen;
END_RCPP
}
// wvar_cpp
arma::mat wvar_cpp(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff, double alpha, std::string ci_type);
RcppExport SEXP _wv_wvar_cpp(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(wvar_cpp(signal_modwt_bw, robust, eff, alpha, ci_type));
    return rcpp_result_gen;
END_RCPP
}
// modwt_wvar_cpp
arma::mat modwt_wvar_cpp(const arma::vec& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP _wv_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return rcpp_result_gen;
END_RCPP
}
// batch_modwt_wvar_cpp
arma::field<arma::mat> batch_modwt_wvar_cpp(const arma::mat& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP _wv_batch_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return rcpp_result_gen;
END_RCPP
}
// scales_cpp
arma::vec scales_cpp(unsigned int nb_level);
RcppExport SEXP _wv_scales_cpp(SEXP nb_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nb_level(nb_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(scales_cpp(nb_level));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_cpp
arma::mat compute_cov_cpp(arma::field<arma::vec> coef1, arma::field<arma::vec> coef2, arma::vec variance, arma::vec lower, arma::vec upper);
RcppExport SEXP _wv_compute_cov_cpp(SEXP coef1SEXP, SEXP coef2SEXP, SEXP varianceSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type coef1(coef1SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type coef2(coef2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type variance(varianceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_cpp(coef1, coef2, variance, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wv_dwt_cpp", (DL_FUNC) &_wv_dwt_cpp, 3},
    {"_wv_modwt_cpp", (DL_FUNC) &_wv_modwt_cpp, 3},
    {"_wv_arma_to_wv", (DL_FUNC) &_wv_arma_to_wv, 4},
    {"_wv_acf_sum", (DL_FUNC) &_wv_acf_sum, 4},
    {"_wv_arma_to_wv_app", (DL_FUNC) &_wv_arma_to_wv_app, 5},
    {"_wv_arma11_to_wv", (DL_FUNC) &_wv_arma11_to_wv, 4},
    {"_wv_ar1_to_wv", (DL_FUNC) &_wv_ar1_to_wv, 3},
    {"_wv_ma1_to_wv", (DL_FUNC) &_wv_ma1_to_wv, 3},
    {"_wv_qn_to_wv", (DL_FUNC) &_wv_qn_to_wv, 2},
    {"_wv_wn_to_wv", (DL_FUNC) &_wv_wn_to_wv, 2},
    {"_wv_rw_to_wv", (DL_FUNC) &_wv_rw_to_wv, 2},
    {"_wv_dr_to_wv", (DL_FUNC) &_wv_dr_to_wv, 2},
    {"_wv_theoretical_wv", (DL_FUNC) &_wv_theoretical_wv, 4},
    {"_wv_decomp_theoretical_wv", (DL_FUNC) &_wv_decomp_theoretical_wv, 4},
    {"_wv_decomp_to_theo_wv", (DL_FUNC) &_wv_decomp_to_theo_wv, 1},
    {"_wv_seq_cpp", (DL_FUNC) &_wv_seq_cpp, 2},
    {"_wv_seq_len_cpp", (DL_FUNC) &_wv_seq_len_cpp, 1},
    {"_wv_quantile_cpp", (DL_FUNC) &_wv_quantile_cpp, 2},
    {"_wv_diff_cpp", (DL_FUNC) &_wv_diff_cpp, 3},
    {"_wv_ARMAtoMA_cpp", (DL_FUNC) &_wv_ARMAtoMA_cpp, 3},
    {"_wv_cfilter", (DL_FUNC) &_wv_cfilter, 4},
    {"_wv_rfilter", (DL_FUNC) &_wv_rfilter, 3},
    {"_wv_ARMAacf_cpp", (DL_FUNC) &_wv_ARMAacf_cpp, 3},
    {"_wv_dft_acf", (DL_FUNC) &_wv_dft_acf, 1},
    {"_wv_mean_diff", (DL_FUNC) &_wv_mean_diff, 1},
    {"_wv_num_rep", (DL_FUNC) &_wv_num_rep, 2},
    {"_wv_intgr_vec", (DL_FUNC) &_wv_intgr_vec, 3},
    {"_wv_diff_inv_values", (DL_FUNC) &_wv_diff_inv_values, 4},
    {"_wv_diff_inv", (DL_FUNC) &_wv_diff_inv, 3},
    {"_wv_acf", (DL_FUNC) &_wv_acf, 4},
    {"_wv_sarma_objdesc", (DL_FUNC) &_wv_sarma_objdesc, 7},
    {"_wv_sarma_calculate_spadding", (DL_FUNC) &_wv_sarma_calculate_spadding, 5},
    {"_wv_sarma_components", (DL_FUNC) &_wv_sarma_components, 1},
    {"_wv_sarma_params_construct", (DL_FUNC) &_wv_sarma_params_construct, 4},
    {"_wv_sarma_expand_unguided", (DL_FUNC) &_wv_sarma_expand_unguided, 8},
    {"_wv_sarma_expand", (DL_FUNC) &_wv_sarma_expand, 2},
    {"_wv_sp_modwt_cpp", (DL_FUNC) &_wv_sp_modwt_cpp, 3},
    {"_wv_sp_hfilter", (DL_FUNC) &_wv_sp_hfilter, 1},
    {"_wv_ci_eta3", (DL_FUNC) &_wv_ci_eta3, 3},
    {"_wv_ci_eta3_robust", (DL_FUNC) &_wv_ci_eta3_robust, 4},
    {"_wv_ci_wave_variance", (DL_FUNC) &_wv_ci_wave_variance, 6},
    {"_wv_wave_variance", (DL_FUNC) &_wv_wave_variance, 3},
    {"_wv_wvar_cpp", (DL_FUNC) &_wv_wvar_cpp, 5},
    {"_wv_modwt_wvar_cpp", (DL_FUNC) &_wv_modwt_wvar_cpp, 8},
    {"_wv_batch_modwt_wvar_cpp", (DL_FUNC) &_wv_batch_modwt_wvar_cpp, 8},
    {"_wv_scales_cpp", (DL_FUNC) &_wv_scales_cpp, 1},
    {"_wv_compute_cov_cpp", (DL_FUNC) &_wv_compute_cov_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_wv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
